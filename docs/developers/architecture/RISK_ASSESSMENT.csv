id,severity,area,description,impact,likelihood,status,owner,mitigation,notes,lastUpdated
R1,Critical,Activation/Init,API constructed with null scheduler causing TypeError on slow init,Extension activation crash on some machines,High,Solved,Engineering,Added api.ready, guarded command handlers and deferred event wiring,Fix landed in v1.0.6; verify in CI with slow-init smoke tests,2025-08-20
R2,High,Storage,Async storage initialization changed from sync to async; integration tests assume sync behavior,Integration tests failing; possible user-facing timing issues,High,Solved,Engineering,Made extension activation explicitly async with proper await patterns; storage.whenReady() called before component initialization,Activation now properly awaits storage initialization; race conditions eliminated,2025-08-20
R3,High,Packaging,Packaging/VSIX failed in agent/CI environment; publishing may be blocked,Unable to produce VSIX in some environments,Medium,Open,Release Manager,Add CI job that runs `npx vsce package` and captures environment; ensure vsce auth and node env are available,Local packaging succeeded; CI publishing not yet automated,2025-08-20
R4,Medium,Storage,Fire-and-forget saveState() calls can lead to unhandled rejections or lost writes,Data loss or inconsistent persisted state,Medium,Solved,Engineering,Added comprehensive retry logic with exponential backoff; atomic writes with temp files; rate-limited user notifications,Enhanced with 3-retry pattern and atomic operations; proper void handling with error recovery,2025-08-20
R5,Medium,Dashboard,Overlapping auto-refresh setInterval produced concurrent updates and state races,UI glitches or errors when update takes longer than interval,Medium,Solved,Engineering,Guarded refresh with running flag; switch to recursive setTimeout if needed,Patched in dashboard auto-refresh,2025-08-20
R6,Medium,Timers,Timers (setTimeout) firing after dispose may access disposed resources,UI errors or memory leaks,Low,In Progress,Engineering,Track timeout IDs and clear them on dispose; check all components for timers,Partial fixes applied; audit remaining timeouts,2025-08-20
R7,Medium,Testing,VS Code API mocking fragile in Vitest causing import resolution and context issues,Integration tests failing locally due to mock gaps,Medium,Open,Engineering,Use @vscode/test-electron for integration tests and add small `ExtensionContext` test fixture for unit tests,Created unit smoke tests; need fixture to mock globalStorageUri/globalState properly,2025-08-20
R8,Low,Storage,Concurrent disk writes without a write queue can reorder data,Stale or inconsistent storage reads,Low,Mitigated,Engineering,Added atomic write operations with temp files; retry logic reduces write conflicts; comprehensive error handling,Atomic writes with temp files significantly reduce concurrent write issues; further serialization could be added if needed,2025-08-20
R9,Low,Security,Webview CSP or inline scripts could introduce vulnerabilities or be blocked by VS Code,Webview failures or security warnings,Low,Open,Frontend,Bundle scripts, avoid inline JS, use nonces,All webviews use bundled scripts; verify CSP in webview manifests,2025-08-20
R10,Low,Cross-platform,Activation timing differences across OS/VS Code versions may not surface locally,Users on different machines see activation errors or delayed features,Low,Open,Engineering,Add CI smoke tests that install VSIX in fresh profiles and run commands; publish after verification,Planned; local install of VSIX succeeded (v1.0.6),2025-08-20
R11,Low,Storage,Enhanced error handling may show more user notifications than before,Users may see more error dialogs if storage issues occur frequently,Low,Monitor,Engineering,Rate-limited notifications (5min intervals) with actionable Show Logs option,Notifications provide better user feedback but frequency should be monitored in real usage,2025-08-20
R12,Medium,CSS Architecture,Large inline CSS block (500+ lines) in dashboard.ts getBaseCSS() method,Hard to maintain styling; poor separation of concerns; potential CSP violations; bundle size bloat,High,Open,Frontend,Extract CSS to separate files and bundle them with esbuild; use CSS modules or link tags,Current inline CSS approach makes styling changes difficult and violates modern web development practices,2025-08-20
R13,Medium,CSS Refactoring,CSS extraction refactoring could break existing webview styling across multiple dashboard views,Visual regressions or broken layouts in dashboard; lost styles during extraction,Medium,Open,Frontend,"Incremental extraction approach: extract common styles first, test each view, maintain fallbacks","Need careful testing of all dashboard views during CSS extraction to prevent regressions",2025-08-20
R14,Low,Bundle Management,CSS bundling not configured in esbuild.js - no infrastructure for CSS file handling,Cannot bundle CSS files; need to add CSS loaders and build pipeline changes,Medium,Open,Build Engineering,Add CSS bundling support to esbuild.js; configure CSS asset handling and webview URI generation,Build system needs enhancement to handle CSS assets alongside JS bundles,2025-08-20
R15,High,CSS Framework Integration,Previous Tailwind CSS integration attempt failed due to VS Code CSP and webview security restrictions,Completely broken styling; webviews fail to load; CSS injection blocked,High,Documented Failure,Frontend,Avoid external CSS frameworks; use vanilla CSS with careful CSP compliance; document injection patterns that work,CRITICAL LESSON: External CSS frameworks break VS Code webview security model. Stick to vanilla CSS and inline styles only.,2025-08-20
